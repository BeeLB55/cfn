{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "This template creates a VPC infrastructure for a multi-AZ, multi-tier deployment of a Windows-based application infrastructure. It installs 2 Active Directory Domain Controllers into subnets in separate AZs inside a VPC, as well as Remote Desktop Gateway and NAT instances into the DMZ for each Availability Zone. The default Domain Administrator password will be the one retrieved from the instance.  For adding members to the domain, ensure that they are launched into the domain member security group created by this template and then configure them to use the AD instances fixed private IP addresses as the DNS server. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters"               : {
        "CIDRVPC"          : {
            "Description" : "CIDR Block for the VPC (Example: 10.0.0.0/16, etc...)",
            "Type"        : "String",
            "Default"     : "10.0.0.0/16",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "CIDRPrivateSubnet1"  : {
            "Description"    : "CIDR Block for a Private Subnet (Example: 10.0.0.0/19, 10.0.64.0/19, etc...)",
            "Type"           : "String",
            "Default"        : "10.0.0.0/19",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "CIDRPrivateSubnet2"  : {
            "Description"    : "CIDR Block for a Private Subnet (Example: 10.0.0.0/19, 10.0.64.0/19, etc...)",
            "Type"           : "String",
            "Default"        : "10.0.64.0/19",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "CIDRPublicSubnet1"   : {
            "Description"    : "CIDR Block for a Public DMZ Subnet (Example: 10.0.32.0/20, 10.0.96.0/20, etc...)",
            "Type"           : "String",
            "Default"        : "10.0.32.0/20",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "CIDRPublicSubnet2"   : {
            "Description"    : "CIDR Block for a Public DMZ Subnet (Example: 10.0.32.0/20, 10.0.96.0/20, etc...)",
            "Type"           : "String",
            "Default"        : "10.0.96.0/20",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "KeyPairName" : {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type"        : "AWS::EC2::KeyPair::KeyName"
        },
        "InstanceTypeNAT" : {
            "Description" : "Amazon EC2 instance type for the NAT Instance",
            "Type"        : "String",
            "Default"     : "t2.micro",
            "AllowedValues" : [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ]
        },
        "IpAddressNAT1"   : {
            "Description" : "Fixed private IP in the public subnet for the NAT instance (Example: 10.0.47.254, 10.0.111.254, etc)",
            "Type"        : "String",
            "Default"     : "10.0.47.254"
        },
        "IpAddressNAT2"   : {
            "Description" : "Fixed private IP in the public subnet for the NAT instance (Example: 10.0.47.254, 10.0.111.254, etc)",
            "Type"        : "String",
            "Default"     : "10.0.111.254"
        }
    },
	"Resources" : {
    	"VPCStack" : {
	    	"Type" : "AWS::CloudFormation::Stack",
       	 	"Properties" : {
           		"TemplateURL" : "https://github.com/lorengordon/cfn/raw/master/templates/Template_Networking_VPC_with_IGW.template",
           	 	"Parameters" : {
					"CIDRVPC" : {"Ref" : "CIDRVPC"}
           		}
			}
      	},	
    	"PublicSubnet1Stack" : {
	    	"Type" : "AWS::CloudFormation::Stack",
			"DependsOn" : "VPCStack",
       	 	"Properties" : {
           		"TemplateURL" : "https://github.com/lorengordon/cfn/raw/master/templates/Template_Networking_Public_Subnet.template",
           	 	"Parameters" : {
					"AvailabilityZoneName" : {
                        "Fn::Select" : [
                            0,
                            {
                                "Fn::GetAZs" : ""
                            }
                        ]
                    },
					"CIDRPublicSubnet" : {"Ref" : "CIDRPublicSubnet1"},
					"PublicRouteTableId" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.PublicRouteTableId" ] },
					"VPC" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.VPC" ] }
           		}
			}
      	},
    	"PublicSubnet2Stack" : {
	    	"Type" : "AWS::CloudFormation::Stack",
			"DependsOn" : "VPCStack",
       	 	"Properties" : {
           		"TemplateURL" : "https://github.com/lorengordon/cfn/raw/master/templates/Template_Networking_Public_Subnet.template",
           	 	"Parameters" : {
					"AvailabilityZoneName" : {
                        "Fn::Select" : [
                            1,
                            {
                                "Fn::GetAZs" : ""
                            }
                        ]
                    },
					"CIDRPublicSubnet" : {"Ref" : "CIDRPublicSubnet2"},
					"PublicRouteTableId" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.PublicRouteTableId" ] },
					"VPC" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.VPC" ] }
           		}
			}
      	},
    	"NATwithENI1Stack" : {
	    	"Type" : "AWS::CloudFormation::Stack",
			"DependsOn" : "PublicSubnet1Stack",
       	 	"Properties" : {
           		"TemplateURL" : "https://github.com/lorengordon/cfn/raw/master/templates/Template_Networking_NAT_with_ENI.template",
           	 	"Parameters" : {
					"CIDRVPC" : {"Ref" : "CIDRVPC"},
					"KeyPairName" : {"Ref" : "KeyPairName"},
					"InstanceTypeNAT" : {"Ref" : "InstanceTypeNAT"},
					"IpAddressNAT" : {"Ref" : "IpAddressNAT1"},
					"PublicSubnetId" : { "Fn::GetAtt" : [ "PublicSubnet1Stack", "Outputs.PublicSubnetId" ] },
					"VPC" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.VPC" ] }
           		}
			}
      	},
    	"NATwithENI2Stack" : {
	    	"Type" : "AWS::CloudFormation::Stack",
			"DependsOn" : "PublicSubnet2Stack",
       	 	"Properties" : {
           		"TemplateURL" : "https://github.com/lorengordon/cfn/raw/master/templates/Template_Networking_NAT_with_ENI.template",
           	 	"Parameters" : {
					"CIDRVPC" : {"Ref" : "CIDRVPC"},
					"KeyPairName" : {"Ref" : "KeyPairName"},
					"InstanceTypeNAT" : {"Ref" : "InstanceTypeNAT"},
					"IpAddressNAT" : {"Ref" : "IpAddressNAT2"},
					"PublicSubnetId" : { "Fn::GetAtt" : [ "PublicSubnet2Stack", "Outputs.PublicSubnetId" ] },
					"VPC" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.VPC" ] }
           		}
			}
      	},
    	"PrivateSubnet1Stack" : {
	    	"Type" : "AWS::CloudFormation::Stack",
			"DependsOn" : "NATwithENI1Stack",
       	 	"Properties" : {
           		"TemplateURL" : "https://github.com/lorengordon/cfn/raw/master/templates/Template_Networking_Private_Subnet.template",
           	 	"Parameters" : {
					"AvailabilityZoneName" : {
                        "Fn::Select" : [
                            0,
                            {
                                "Fn::GetAZs" : ""
                            }
                        ]
                    },
					"CIDRPrivateSubnet" : {"Ref" : "CIDRPrivateSubnet1"},
					"PrivateRouteTableId" : { "Fn::GetAtt" : [ "NATwithENI1Stack", "Outputs.PrivateRouteTableId" ] },
					"VPC" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.VPC" ] }
           		}
			}
      	},
    	"PrivateSubnet2Stack" : {
	    	"Type" : "AWS::CloudFormation::Stack",
			"DependsOn" : "NATwithENI2Stack",
       	 	"Properties" : {
           		"TemplateURL" : "https://github.com/lorengordon/cfn/raw/master/templates/Template_Networking_Private_Subnet.template",
           	 	"Parameters" : {
					"AvailabilityZoneName" : {
                        "Fn::Select" : [
                            1,
                            {
                                "Fn::GetAZs" : ""
                            }
                        ]
                    },
					"CIDRPrivateSubnet" : {"Ref" : "CIDRPrivateSubnet2"},
					"PrivateRouteTableId" : { "Fn::GetAtt" : [ "NATwithENI2Stack", "Outputs.PrivateRouteTableId" ] },
					"VPC" : { "Fn::GetAtt" : [ "VPCStack", "Outputs.VPC" ] }
           		}
			}
      	}
    }
}